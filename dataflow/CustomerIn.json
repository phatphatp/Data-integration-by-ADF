{
	"name": "CustomerIn",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CUSTOMER",
						"type": "DatasetReference"
					},
					"name": "Customer"
				},
				{
					"dataset": {
						"referenceName": "CustomerTable",
						"type": "DatasetReference"
					},
					"name": "CusTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CustomerTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter2"
				},
				{
					"name": "Select1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "Exists1"
				}
			],
			"script": "source(output(\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tPHONE as string,\n\t\tEMAIL as string,\n\t\t{ADDRESS LINE 1} as string,\n\t\t{ADDRESS LINE 2} as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY as string,\n\t\tZIPCODE as string,\n\t\t{ADDRESS TYPE} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Customer\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tFULL_NAME as string,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tADDRESS_LINE1 as string,\n\t\tADDRESS_LINE2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY as string,\n\t\tZIPCODE as string,\n\t\tADDRESS_TYPE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CusTable\nCustomer derive(FULL_NAME = FIRST_NAME+' '+LAST_NAME) ~> DerivedColumn1\nExists1 filter(!isNull(EMAIL),\n\tpartitionBy('hash', 1)) ~> Filter2\nDerivedColumn1 select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tPHONE,\n\t\tEMAIL,\n\t\t{ADDRESS_LINE 1} = {ADDRESS LINE 1},\n\t\t{ADDRESS_LINE 2} = {ADDRESS LINE 2},\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY,\n\t\tZIPCODE,\n\t\tADDRESS_TYPE = {ADDRESS TYPE},\n\t\tFULL_NAME\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter2 alterRow(insertIf(true())) ~> AlterRow1\nSelect1, CusTable exists(Select1@CUSTOMER_ID == CusTable@CUSTOMER_ID\n\t&& Select1@COUNTRY == CusTable@COUNTRY\n\t&& Select1@STATE == CusTable@STATE\n\t&& Select1@ADDRESS_TYPE == CusTable@ADDRESS_TYPE,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nAlterRow1 sink(input(\n\t\tCUSTOMER_ID as integer,\n\t\tFULL_NAME as string,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tADDRESS_LINE1 as string,\n\t\tADDRESS_LINE2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY as string,\n\t\tZIPCODE as string,\n\t\tADDRESS_TYPE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFULL_NAME,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tADDRESS_LINE1 = {ADDRESS_LINE 1},\n\t\tADDRESS_LINE2 = {ADDRESS_LINE 2},\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY,\n\t\tZIPCODE,\n\t\tADDRESS_TYPE\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}