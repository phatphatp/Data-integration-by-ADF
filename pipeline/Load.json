{
	"name": "Load",
	"properties": {
		"activities": [
			{
				"name": "Get Metadata1",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "CUSTOMER",
						"type": "DatasetReference"
					},
					"fieldList": [
						"exists",
						"itemName",
						"itemType",
						"structure",
						"contentMD5",
						"lastModified"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ExistingCustomerFile",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Get Metadata1').output.exists\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "ErrorEmail1",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "ErrorEmail",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "CustomerIn",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "CustomerIn",
									"type": "DataFlowReference"
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								}
							}
						}
					]
				}
			},
			{
				"name": "Get Metadata2",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ORDER_DETAILS",
						"type": "DatasetReference"
					},
					"fieldList": [
						"exists",
						"itemName",
						"itemType",
						"lastModified",
						"structure",
						"contentMD5"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Get Metadata3",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "WAREHOUSE",
						"type": "DatasetReference"
					},
					"fieldList": [
						"contentMD5",
						"exists",
						"itemName",
						"itemType",
						"lastModified",
						"structure"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ExistingOrderDetailFile",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Get Metadata2').output.exists\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "ErrorEmail2",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "ErrorEmail",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "OrderIn",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "OrderIn",
									"type": "DataFlowReference"
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								}
							}
						}
					]
				}
			},
			{
				"name": "ExistingWarehouserFile",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata3",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Get Metadata3').output.exists\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "ErrorEmail3",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "ErrorEmail",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "WarehouseIn",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "WarehouseIn",
									"type": "DataFlowReference"
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								}
							}
						}
					]
				}
			}
		],
		"folder": {
			"name": "Main"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}